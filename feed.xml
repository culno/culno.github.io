<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.4.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-03-05T23:56:13+08:00</updated><id>//</id><title type="html">culno</title><subtitle>Do not restrict yourself when you can fly!
</subtitle><entry><title type="html">Transfer Data From Outer Using Componentwillreceiveprops</title><link href="/react/2017/03/05/transfer-data-from-outer-using-componentWillReceiveProps.html" rel="alternate" type="text/html" title="Transfer Data From Outer Using Componentwillreceiveprops" /><published>2017-03-05T23:48:04+08:00</published><updated>2017-03-05T23:48:04+08:00</updated><id>/react/2017/03/05/transfer-data-from-outer-using-componentWillReceiveProps</id><content type="html" xml:base="/react/2017/03/05/transfer-data-from-outer-using-componentWillReceiveProps.html">&lt;p&gt;我们知道,可以通过更改props来设置子module 初始值,但是想在外部环境更新时同时更新子模块的状态,进而重新渲染子模块,该怎么办呢?&lt;/p&gt;

&lt;p&gt;The answer is:componentWillReceiveProps 方法.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Invoked when a component is receiving new props. This method is not called for the initial render.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use this as an opportunity to react to a prop transition before render() is called by updating the state using this.setState(). The old props can be accessed via this.props. Calling this.setState() within this function will not trigger an additional render.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;componentWillReceiveProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><summary type="html">我们知道,可以通过更改props来设置子module 初始值,但是想在外部环境更新时同时更新子模块的状态,进而重新渲染子模块,该怎么办呢?</summary></entry><entry><title type="html">Abandon Setstate In React</title><link href="/react/2017/03/05/abandon-setState-in-React.html" rel="alternate" type="text/html" title="Abandon Setstate In React" /><published>2017-03-05T22:11:58+08:00</published><updated>2017-03-05T22:11:58+08:00</updated><id>/react/2017/03/05/abandon-setState-in-React</id><content type="html" xml:base="/react/2017/03/05/abandon-setState-in-React.html">&lt;p&gt;初学React 收到的第一个大礼包就是 state 了.所有的乱七八糟对的状态改变统一归state管理,然后一有变化就高性能通过虚拟dom机制渲染页面.听起来多么美妙!&lt;/p&gt;

&lt;p&gt;wow!&lt;/p&gt;

&lt;p&gt;然而,不能过分依赖setState 方法. 虽然看上去setState像极了一个同步方法,但&lt;/p&gt;

&lt;p&gt;其实它不保证同步!!!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is no guarantee of synchronous operation of calls to setState and calls may be batched for performance gains.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;setState() will always lead to a re-render unless shouldComponentUpdate() returns false. If mutable objects are being used and conditional rendering logic cannot be implemented in shouldComponentUpdate(), calling setState() only when the new state differs from the previous state will avoid unnecessary re-renders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;LOOK! 人家官网都说了,不立即修改值!(但是我们肯定会re-render 哦!^_^)&lt;/p&gt;

&lt;p&gt;呃呃,好吧. 涨知识了.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;那该以什么样的正确姿势使用setState 捏?
 &lt;br /&gt;哈哈,直接state.xx = xx 不完了么.&lt;/p&gt;</content><summary type="html">初学React 收到的第一个大礼包就是 state 了.所有的乱七八糟对的状态改变统一归state管理,然后一有变化就高性能通过虚拟dom机制渲染页面.听起来多么美妙!</summary></entry><entry><title type="html">Test</title><link href="/2017/03/05/test.html" rel="alternate" type="text/html" title="Test" /><published>2017-03-05T18:54:43+08:00</published><updated>2017-03-05T18:54:43+08:00</updated><id>/2017/03/05/test</id><content type="html" xml:base="/2017/03/05/test.html">&lt;p&gt;So tedious everytime I write a new blog.
So I just did some coding work to simplify it!
So the current procedure to post a new blog is :&lt;/p&gt;

&lt;p&gt;1.sh new.sh {title}
2.sh time.sh
3.replace the datetime in the new blog (just paste!)
4.write content
4.sh build-and-post.sh&lt;/p&gt;

&lt;p&gt;Congratulations! hahaha…&lt;/p&gt;</content><summary type="html">So tedious everytime I write a new blog.
So I just did some coding work to simplify it!
So the current procedure to post a new blog is :</summary></entry><entry><title type="html">巧用Charles Rewrite 实现hybrid真机开发</title><link href="/jekyll/2017/03/02/charles-rewrite.html" rel="alternate" type="text/html" title="巧用Charles Rewrite 实现hybrid真机开发" /><published>2017-03-02T02:45:00+08:00</published><updated>2017-03-02T02:45:00+08:00</updated><id>/jekyll/2017/03/02/charles-rewrite</id><content type="html" xml:base="/jekyll/2017/03/02/charles-rewrite.html">&lt;p&gt;作为一名”实践是检验真理的唯一标准”的拥护者,偶hybrid开发时有个 边撸代码边看真机效果 的好习惯.
在我们大Windows上开发不必多言,Fiddler神器 谁用谁知道! AutoResponse 功能重定义功能简直不能更爽!&lt;/p&gt;

&lt;p&gt;但是…&lt;/p&gt;

&lt;p&gt;最近喜欢上了mac….&lt;/p&gt;

&lt;p&gt;没Fiddler? 哈哈,木问题,大Charles 来也!&lt;/p&gt;

&lt;p&gt;———-正文分割线——–&lt;/p&gt;

&lt;p&gt;真机(iPhone)上装有 uat环境测试包&lt;/p&gt;

&lt;p&gt;是的!就是在测试包里 开发新功能!&lt;/p&gt;

&lt;p&gt;项目代码背景:&lt;/p&gt;

&lt;p&gt;front:
    coffeescript + webpack(webpack-dev-server) + gulp +HybridBridge + …
backend:
    node + pm2 + tracer + dot + ….&lt;/p&gt;

&lt;p&gt;部分页面纯frontend 渲染, 部分页面还得加上 后端node dot渲染.&lt;/p&gt;

&lt;p&gt;因为 Hybrid app 有以下几个硬性要求:
1.必须https 不然请求发不出去
2.不能用除443 80 以外端口&lt;/p&gt;

&lt;p&gt;所以最终解决办法是 使用 Charles Rewrite :
1.https://xxx.com/ -&amp;gt; http://localhost:8080/
2.将url里的端口删掉(webpack-dev-server用到的)  然后 https://xxx.com/publish/ -&amp;gt; http://localhost:3000/publish&lt;/p&gt;

&lt;p&gt;———正文结束———–&lt;/p&gt;

&lt;p&gt;总结:&lt;/p&gt;

&lt;p&gt;最终解决方案很简单,不到几分钟就可以搞定. 但是由于一些挂件资料不知道,导致走了很多弯路 (尤其是那两个约束条件,最终是Charles里调试了好多才总结出的)&lt;/p&gt;

&lt;p&gt;回头尝试另外一种更简单的解决办法….&lt;/p&gt;

&lt;p&gt;对了,mac vpn 下 local IP 咋一直ping 不通呢??? 继续研究下…&lt;/p&gt;</content><summary type="html">作为一名”实践是检验真理的唯一标准”的拥护者,偶hybrid开发时有个 边撸代码边看真机效果 的好习惯.
在我们大Windows上开发不必多言,Fiddler神器 谁用谁知道! AutoResponse 功能重定义功能简直不能更爽!</summary></entry><entry><title type="html">My first blog</title><link href="/jekyll/2017/02/09/first-blog.html" rel="alternate" type="text/html" title="My first blog" /><published>2017-02-09T22:26:16+08:00</published><updated>2017-02-09T22:26:16+08:00</updated><id>/jekyll/2017/02/09/first-blog</id><content type="html" xml:base="/jekyll/2017/02/09/first-blog.html">&lt;p&gt;This is my first blog!&lt;/p&gt;</content><summary type="html">This is my first blog!</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2017/02/08/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-02-08T23:17:16+08:00</published><updated>2017-02-08T23:17:16+08:00</updated><id>/jekyll/update/2017/02/08/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2017/02/08/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>
